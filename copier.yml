algorithm_name:
    type: str
    help: What is your algorithm name?

algorithm_description:
    type: str
    help: Please enter a short description (one sentence) of your algorithm.

open_source_license:
  type: str
  help: "The open source license to use"
  choices:
    "MIT": mit
    "Apache Software License 2.0": apache
    "GNU General Public License v3": gpl
    "No license (you can add one later)": no_license

# ------------- Define central algorithm function ---------- #

has_central_function:
  type: bool
  help: "Do you want to use a central function in your algorithm?"
  default: true

central_function_name:
  type: str
  when: "{{ has_central_function }}"
  help: "What is the name of your central function?"
  default: central

central_function_client:
  type: bool
  when: "{{ has_central_function }}"
  help: "Do you want to use a client in your central function?"
  default: true

central_function_data:
  type: bool
  when: "{{ has_central_function }}"
  help: "Do you want to use data in your central function?"
  default: false

central_function_number_databases:
  type: int
  when: "{{ has_central_function and central_function_data }}"
  help: "How many databases do you want to use in your central function?"
  default: 1
  validator: "{% if central_function_number_databases < 1 %}Must be at least 1{% endif %}"

central_args:
  type: json
  when: "{{ has_central_function }}"
  help: "Add a list of arguments to the central function '{{ central_function_name }}'"
  default: ['arg1', ]
  multiline: true

# ------------- Define partial algorithm function ---------- #

has_partial_function:
  type: bool
  help: "Do you want to use a partial function in your algorithm?"
  default: true

partial_function_name:
  type: str
  when: "{{ has_partial_function }}"
  help: "What is the name of your partial function?"
  default: partial

partial_function_client:
  type: bool
  when: "{{ has_partial_function }}"
  help: "Do you want to use a client in your partial function?"
  default: false

partial_function_data:
  type: bool
  when: "{{ has_partial_function }}"
  help: "Do you want to use data in your partial function?"
  default: true

partial_function_number_databases:
  type: int
  when: "{{ has_partial_function and partial_function_data }}"
  help: "How many databases do you want to use in your partial function?"
  default: 1
  validator: "{% if partial_function_number_databases < 1 %}Must be at least 1{% endif %}"

partial_args:
  type: json
  when: "{{ has_partial_function }}"
  help: "Add a list of arguments to the partial function '{{ partial_function_name }}'"
  default: ['arg1', ]
  multiline: true

# ----------------------- Set up VPN ----------------------- #
use_vpn:
  type: bool
  help: "Do you want to use the VPN network in your algorithm?"
  default: false

# ----------------------- Advanced ------------------------- #

advanced:
  type: bool
  help: "Do you want to see the advanced options?"
  default: false

vpn_expose:
  type: json
  when: "{{ advanced and use_vpn }}"
  help: |
    Configure the ports to expose in the VPN. You can add multiple ports
    by adding more dictionaries with keys 'label' and 'port'.
  default: [{'port': 8888, 'label': 'my_label'}]
  multiline: true
  validator: |
    {% for port_dict in vpn_expose %}
        {% if 'port' not in port_dict %}
          Each dictionary should have a 'port' key.
        {% endif %}
        {% if 'label' not in port_dict %}
          Each dictionary should have a 'label' key.
        {% endif %}
    {% endfor %}


# ----------------------- Copier metadata ------------------ #

# Additional copier metadata
_min_copier_version: "8.0.0"
# _tasks:
  # Remove license file if no license
  # TODO this doesn't work yet on Windows, no 'rm' command... Maybe we can
  # find an easier solution by handling this in the `v6 algorithm` command
  # - "{% if open_source_license == 'no_license' %}rm LICENSE{% endif %}"
  # TODO: similarly, delete if empty: central.py, partial.py
_message_after_copy: |
  Your algorithm template "{{ algorithm_name }}" has been created successfully!

  Checkout the README.md file for more information on how to get started. It
  contains a checklist to help you further develop your algorithm.
_message_before_copy: |

  Welcome to the vantage6 algorithm template creator!

  You will be asked a series of questions to generate the basis of your new
  vantage6 algorithm in Python.
_envops:
  # Jinja settings to remove whitespace
  lstrip_blocks: true
  trim_blocks: true
_exclude:
  # exclude jinja macro files from being copied to algorithm
  - macros
  - .git
  - copier.yml